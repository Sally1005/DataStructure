#/**
# * workflow.yml (工作流-GitHub Actions 自动托管代码,代码每次从本地 push到仓库时都会自动执行测试用例)
# *
# * @author 张利红
# */

# workflow 的名称，会在 GitHub Action 页面上显示的名称
name: Junit

# 代码只有在 push到 main 分支上才会此 workflow
on:
  push:
    branches: [ main ]
    # 仅在以下文件修改时才触发，减少每次细微修改 push 后在运行器上的周期浪费
  #  paths: [ '**.java', '.github/workflows/build.yml', 'pom.xml' ]
  # 人工触发  
  workflow_dispatch:
  
# 创建一个job  
jobs:
  # 将此 job 的名称设定为 'build'
  build:
    # 执行在最新版本的 ubuntu runner 上
    runs-on: ubuntu-latest
    # 设定系统上的环境变量，包含连接数据库的设定 (例如 MySQL)
    # 较为私密的信息可以存放在 GitHub Action 的 secrets
    # 在 yml 文档中可以使用 ${{ secrets.SECRET_NAME }} 取得 secrets 中存放的值
    
    # 执行步骤
    steps:
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Setup MySQL
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-server

      - name: Build with Maven
        run: |
          mvn clean install
          mvn clean package

      - name: Run MySQL initialization script
        run: |
          # Replace with your MySQL initialization script command
          mysql -u root -p < fruit.sql > init-result.txt

      - name: Cache Maven, MySQL, JDK8 and initialization result
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2/repository
            /var/lib/mysql
            init-result.txt
          key: ${{ runner.os }}-maven-mysql-jdk8-init-${{ hashFiles('**/*.sql') }}
          restore-keys: |
            ${{ runner.os }}-maven-mysql-jdk8-init-

      - name: Use cached Maven, MySQL, JDK8 and initialization result
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          cp -r /tmp/cache/.m2 ~/
          cp -r /tmp/cache/mysql /var/lib/
          cp /tmp/cache/init-result.txt .
       
         # 设立时区
      - name: Set timezone to Shanghai
        run: |
            sudo rm /etc/localtime
            sudo ln -s /usr/share/zoneinfo/Asia/Shanghai/etc/localtime
                        
       # 使用Github Action市场提供的Junit流程来执行单元测试，并且输出报告
      - name: Run Unit Tests
        run: mvn -B test --file pom.xml
      - uses: ashley-taylor/junit-report-annotations-action@master
        with:
            access-token: ${{ secrets.GITHUB_TOKEN }}
        if: always()

        # 下载jacoco测试覆盖率报告
      - name: Download Jacoco Report
        run: |
            curl -LJO "https://raw.githubusercontent.com/${{ github.repository }}/main/target/site/jacoco/jacoco.xml"
        
        # 将报告上传至Codecov
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
           token: ${{ secrets.CODECOV_TOKEN }}
           files: ./target/site/jacoco/jacoco.xml
           
           
          











